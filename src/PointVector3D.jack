class PointVector3D 
{
    // Note: the fields are basically readonly
    // and initiated on creation of the point
    field Fraction x, y, z;

    /** Returns the default (0, 0, 0) vector/point.
        Should be used in a perfect world :) */ 
    function PointVector3D default()
    {
        return PointVector3D.new(0, 0, 0);
    }

    constructor PointVector3D new(Fraction coordX, Fraction coordY, Fraction coordZ)
    {
        let x = coordX;
        let y = coordY;
        let z = coordZ;

        return this;
    }

    /* I wish these could be C# properties!
       And also, these are meant to be private,
       but Jack does not have any mechanisms to
       ensure something like that, so
       this will be a convention like Python's*/
    method Fraction _getXcoord() { return x; }
    method Fraction _getYcoord() { return y; }
    method Fraction _getZcoord() { return z; }

    /** Adds this vector and the other as a new object */
    method PointVector3D vectorAdd(PointVector3D other) 
    {
        return PointVector3D.new(
            x.add(other._getXcoord()),
            y.add(other._getYcoord()),
            z.add(other._getZcoord())
        );
    }

    /** Subtracts the other vector from this as a new object */
    method PointVector3D vectorSub(PointVector3D other)
    {
        return PointVector3D.new(
            x.sub(other._getXcoord()),
            y.sub(other._getYcoord()),
            z.sub(other._getZcoord())
        );
    }

    /** Return the standart dot product for two vectors treating the basis 
        as an orthogonal and normalised one */ 
    method Fraction dotProduct(PointVector3D other)
    {
        var Fraction result;

        let result = x.mult( other._getXcoord() );
        let result = result.add( y.mult(other._getYcoord()) );
        let result = result.add( z.mult(other._getZcoord()) );

        return result;
    }

    /** */
    method PointVector3D crossProduct(PointVector3D other)
    {
        // TODO: realise this method using matrix determinants when they are done
        return PointVector3D.default();
    }

    /** Return the distance between two points as a Fraction object */
    method Fraction getDistanceTo(PointVector3D other)
    {
        var Fraction result, temp;

        let temp = x.sub(other._getXcoord());
        let result = temp.mult(temp);

        let temp = y.sub(other._getYcoord());
        let result = result.add( temp.mult(temp) );
        
        let temp = z.sub(other._getZcoord());
        let result = result.add( temp.mult(temp) );

        return result.sqrt();
    }

    method void Dispose()
    {
        do Memory.deAlloc(this);
        return;
    }
}