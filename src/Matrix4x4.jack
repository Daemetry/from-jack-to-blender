class Matrix4x4{
    field Array rows;

    function Matrix4x4 getRotationZMatrix(Fraction timeValue){
        var Matrix4x4 result;
        var Fraction cosFr, sinFr;

        let result = Matrix4x4.new();
        let cosFr = MathTrigonometry.cos(timeValue);
        let sinFr = MathTrigonometry.sin(timeValue);

        do result.setValue(0, 0, cosFr);                    // cos(t)
        do result.setValue(0, 1, sinFr);                    // sin(t)
        do result.setValue(1, 0, sinFr.multInt(-1));        // -sin(t)
        do result.setValue(1, 1, cosFr);                    // cos(t)
        do result.setValue(2, 2, Fraction.getOne());        // 1
        do result.setValue(3, 3, Fraction.getOne());        // 1

        return result;
    }

        function Matrix4x4 getRotationXMatrix(Fraction timeValue){
        var Matrix4x4 result;
        var Fraction halfTimeValue, cosFr, sinFr;

        let result = Matrix4x4.new();
        let halfTimeValue = timeValue.mult(Fraction.new(1, 2));

        let cosFr = MathTrigonometry.cos(halfTimeValue);
        let sinFr = MathTrigonometry.sin(halfTimeValue);

        do result.setValue(0, 0, Fraction.getOne());            // 1
        do result.setValue(1, 1, cosFr);                        // cos(t/2)
        do result.setValue(1, 2, sinFr);                        // sin(t/2)
        do result.setValue(2, 1, sinFr.multInt(-1));            // -sin(t/2)
        do result.setValue(2, 2, cosFr);                        // cos(t/2)
        do result.setValue(3, 3, Fraction.getOne());            // 1

        return result;
    }


    function Matrix4x4 getProjectionMatrix(Fraction fNear, Fraction fFar, Fraction fFov, Fraction fAspectRatio, Fraction fFovRad){
        var Matrix4x4 result;
        let result = Matrix4x4.new();

        do result.setValue(0, 0, fAspectRatio.mult(fFovRad));   // fAspectRatio * fFovRad
        do result.setValue(1, 1, fFovRad);                      // fFovRad
        do result.setValue(2, 2, fFar.div(fFar - fNear));       // fFar * (fFar - fNear)
        do result.setValue(2, 3, Fraction.getOne());            // 1

        // Already default
        // do result.setValue(3, 3, Fraction.getDefault()) 

        return result;
    }

    // This method mutates Array<int> to Array<Fraction>
    function Array fill4x4ArrayWithFractions(){
        var Array result;
        var int i;
        let result = Array.new(4);
        let i = 0;

        while(i < 4){
            let result[i] = Fraction.getDefault();
            let i = i + 1;
        }

        return result;
    }

    constructor Matrix4x4 new(){
        var int i;
        let i = 0;
        let rows = Array.new(4);

        while(i < 4){
            let rows[i] = Matrix4x4.fill4x4ArrayWithFractions();
            let i = i + 1;
        }

        return this;
    }

    method Fraction getValue(int row, int column){
        var Array currentRow;
        let currentRow = rows[row];
        return currentRow[column];
    }

    method void setValue(int row, int column, Fraction value){
        var Array newRaw;
        let newRaw = rows[row];
        let newRaw[column] = value;
        let rows[row] = newRaw;
        return;
    }


    function PointVector3D multiplyMatrixVector(PointVector3D inputVector, Matrix4x4 inputMatrix){
        var Fraction x, y, z, w;
        var Fraction m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33;
        var PointVector3D resultVector;

        let m00 = matrix.getValue(0, 0);
        let m10 = matrix.getValue(1, 0);
        let m20 = matrix.getValue(2, 0);
        let m30 = matrix.getValue(3, 0);
        let m01 = matrix.getValue(0, 1);
        let m11 = matrix.getValue(1, 1);
        let m21 = matrix.getValue(2, 1);
        let m31 = matrix.getValue(3, 1);
        let m02 = matrix.getValue(0, 2);
        let m12 = matrix.getValue(1, 2);
        let m22 = matrix.getValue(2, 2);
        let m32 = matrix.getValue(3, 2);
        let m03 = matrix.getValue(0, 3);
        let m13 = matrix.getValue(1, 3);
        let m23 = matrix.getValue(2, 3);
        let m33 = matrix.getValue(3, 3);

        

        let x = m00.mult(inputVector._getXcoord());
        let x = x.add(m10.mult(inputVector._getYcoord()));
        let x = x.add(m20.mult(inputVector._getZcoord()));
        let x = x.add(m30);

        let y = m01.mult(inputVector._getXcoord());
        let y = y.add(m11.mult(inputVector._getYcoord()));
        let y = y.add(m21.mult(inputVector._getZcoord()));
        let y = y.add(m31);

        let z = m02.mult(inputVector._getXcoord());
        let z = y.add(m12.mult(inputVector._getYcoord()));
        let z = y.add(m22.mult(inputVector._getZcoord()));
        let z = y.add(m32);

        let w = m03.mult(inputVector._getXcoord());
        let w = y.add(m13.mult(inputVector._getYcoord()));
        let w = y.add(m23.mult(inputVector._getZcoord()));
        let w = y.add(m33);

        if (~ w = Fraction.getDefault()) {
            let x = x.div(w);
            let y = y.div(w);
            let z = z.div(w);
        }

        return PointVector3D.new(x, y, z);
    }



    method Array getRows(){
        return rows;
    }

    method void print(){
        var Array tempRow;
        var Fraction tempFraction;
        var int i, j;
                 
        let i = 0;
        while(i < 4){

            let j = 0;
            let tempRow = rows[i];
            while(j < 4){
                let tempFraction = tempRow[j];
                do Output.printString("(");
                do tempFraction.print();
                do Output.printString(")");
                let j = j + 1;
            }
            do Output.println();
            let i = i + 1;
        }
        return;
    }

    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }
}