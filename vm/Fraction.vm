function Fraction.getDefault 0
push constant 0
push constant 1
call Fraction.new 2
return
function Fraction.getOne 0
push constant 1
push constant 1
call Fraction.new 2
return
function Fraction.new 0
push constant 2
call Memory.alloc 1
pop pointer 0
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 0
pop this 0
push argument 1
pop this 1
push pointer 0
call Fraction.reduce 1
pop temp 0
push pointer 0
return
function Fraction.newUnreduced 0
push constant 2
call Memory.alloc 1
pop pointer 0
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 0
pop this 0
push argument 1
pop this 1
push pointer 0
return
function Fraction.getDenominator 0
push argument 0
pop pointer 0
push this 1
return
function Fraction.getNumerator 0
push argument 0
pop pointer 0
push this 0
return
function Fraction.reduce 1
push argument 0
pop pointer 0
push this 0
push this 1
call Fraction.gcd 2
pop local 0
push local 0
push constant 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 0
push local 0
call Math.divide 2
pop this 0
push this 1
push local 0
call Math.divide 2
pop this 1
label IF_FALSE0
push constant 0
return
function Fraction.toInt 0
push argument 0
pop pointer 0
push this 0
push this 1
call Math.divide 2
return
function Fraction.print 0
push argument 0
pop pointer 0
push this 0
call Output.printInt 1
pop temp 0
push constant 1
call String.new 1
push constant 47
call String.appendChar 2
call Output.printString 1
pop temp 0
push this 1
call Output.printInt 1
pop temp 0
push constant 0
return
function Fraction.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Fraction.gcd 1
label WHILE_EXP0
push argument 1
push constant 0
eq
not
not
if-goto WHILE_END0
push argument 0
push argument 1
push argument 0
push argument 1
call Math.divide 2
call Math.multiply 2
sub
pop local 0
push argument 1
pop argument 0
push local 0
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push argument 0
return
function Fraction.lcm 0
push argument 0
push argument 0
push argument 1
call Fraction.gcd 2
call Math.divide 2
push argument 1
call Math.multiply 2
return
function Fraction.isNegative 2
push argument 0
call Fraction.getNumerator 1
pop local 0
push argument 0
call Fraction.getDenominator 1
pop local 1
push local 0
push local 1
call Math.multiply 2
push constant 0
lt
return
function Fraction.add 2
push argument 0
pop pointer 0
push this 1
push argument 1
call Fraction.getDenominator 1
call Fraction.gcd 2
pop local 1
push this 0
push argument 1
call Fraction.getDenominator 1
push local 1
call Math.divide 2
call Math.multiply 2
push argument 1
call Fraction.getNumerator 1
push this 1
push local 1
call Math.divide 2
call Math.multiply 2
add
pop local 0
push local 0
push this 1
push local 1
call Math.divide 2
push argument 1
call Fraction.getDenominator 1
call Math.multiply 2
call Fraction.newUnreduced 2
return
function Fraction.sub 2
push argument 0
pop pointer 0
push this 1
push argument 1
call Fraction.getDenominator 1
call Fraction.gcd 2
pop local 1
push this 0
push argument 1
call Fraction.getDenominator 1
push local 1
call Math.divide 2
call Math.multiply 2
push argument 1
call Fraction.getNumerator 1
push this 1
push local 1
call Math.divide 2
call Math.multiply 2
sub
pop local 0
push local 0
push this 1
push local 1
call Math.divide 2
push argument 1
call Fraction.getDenominator 1
call Math.multiply 2
call Fraction.newUnreduced 2
return
function Fraction.mult 2
push argument 0
pop pointer 0
push this 0
push argument 1
call Fraction.getDenominator 1
call Fraction.gcd 2
pop local 0
push this 1
push argument 1
call Fraction.getNumerator 1
call Fraction.gcd 2
pop local 1
push this 0
push local 0
call Math.divide 2
push argument 1
call Fraction.getNumerator 1
push local 1
call Math.divide 2
call Math.multiply 2
push this 1
push local 1
call Math.divide 2
push argument 1
call Fraction.getDenominator 1
push local 0
call Math.divide 2
call Math.multiply 2
call Fraction.newUnreduced 2
return
function Fraction.div 2
push argument 0
pop pointer 0
push argument 1
call Fraction.getNumerator 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 1
call Fraction.getDenominator 1
push argument 1
call Fraction.getNumerator 1
call Fraction.newUnreduced 2
pop local 0
push pointer 0
pop local 1
push local 1
push local 0
call Fraction.mult 2
pop local 1
push local 0
call Fraction.dispose 1
pop temp 0
push local 1
return
function Fraction.sqrt 1
push argument 0
pop pointer 0
push constant 1
pop local 0
push this 0
push constant 8196
lt
push this 1
push constant 8196
lt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 4
pop local 0
label IF_FALSE0
push this 0
push constant 2048
lt
push this 1
push constant 2048
lt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 16
pop local 0
label IF_FALSE1
push this 0
push constant 512
lt
push this 1
push constant 512
lt
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 64
pop local 0
label IF_FALSE2
push this 0
push constant 128
lt
push this 1
push constant 128
lt
and
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 256
pop local 0
label IF_FALSE3
push this 0
push constant 32
lt
push this 1
push constant 32
lt
and
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 1024
pop local 0
label IF_FALSE4
push this 0
push local 0
call Math.multiply 2
call Math.sqrt 1
push this 1
push local 0
call Math.multiply 2
call Math.sqrt 1
call Fraction.new 2
return
function Fraction.addInt 0
push argument 0
pop pointer 0
push this 0
push argument 1
push this 1
call Math.multiply 2
add
push this 1
call Fraction.new 2
return
function Fraction.subInt 0
push argument 0
pop pointer 0
push this 0
push argument 1
push this 1
call Math.multiply 2
sub
push this 1
call Fraction.new 2
return
function Fraction.multInt 0
push argument 0
pop pointer 0
push this 0
push argument 1
call Math.multiply 2
push this 1
call Fraction.new 2
return
function Fraction.divInt 0
push argument 0
pop pointer 0
push this 0
push this 1
push argument 1
call Math.multiply 2
call Fraction.new 2
return
function Fraction.fracSqrt 1
push argument 0
push constant 1
call Fraction.newUnreduced 2
pop local 0
push local 0
call Fraction.sqrt 1
return
function Fraction.reverse 0
push argument 0
pop pointer 0
push this 1
push this 0
call Fraction.new 2
return
