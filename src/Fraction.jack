class Fraction{
    field int numerator, denominator;

    constructor Fraction new(int x, int y) {
        let numerator = x;
        let denominator = y;
        do reduce();
        return this; 
    }

    method void reduce()
    {
        var int g;
        let g = Fraction.gcd(numerator, denominator);
        if (g > 1) 
        {
            let numerator = numerator / g;
            let denominator = denominator / g;
        }
        return;
    }

    method void print()
    {
        do Output.printInt(numerator);
        do Output.printString("/");
        do Output.printInt(denominator);
        return;
    }

    method void dispose()
    {
        do Memory.deAlloc(this);
        return;
    }

    function int gcd(int a, int b)
    {
        var int r;
        while(~(b = 0))
        {
            let r = a - (b * (a / b));
            let a = b;
            let b = r;
        }
        return a;
    }
    
    method Fraction plus(Fraction other)
    {
        var int sumNumerators;
        let sumNumerators = (numerator * other.getDenominator()) + (other.getNumerator() * denominator);
        return Fraction.new(sumNumerators, denominator * other.getDenominator());
    }
    
    method Fraction mult(Fraction other)
    {
        return Fraction.new(numerator * other.getNumerator(), denominator * other.getDenominator());
    }

    method int getNumerator()
    {
        return numerator;
    }
        
    method int getDenominator()
    {
        return denominator;
    }
}