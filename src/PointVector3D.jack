class PointVector3D 
{
    // Note: the fields are basically readonly
    // and initiated on creation of the point
    field Fraction x, y, z;

    /** Returns the default (0, 0, 0) vector/point.
        Shouldn't be used in a perfect world :) */ 
    function PointVector3D default()
    {
        return PointVector3D.new(0, 0, 0);
    }

    constructor PointVector3D new(Fraction coordX, Fraction coordY, Fraction coordZ)
    {
        let x = coordX;
        let y = coordY;
        let z = coordZ;
         
        return this;
    }

    constructor PointVector3D newInt(int coordX, int coordY, int coordZ){
        let x = Fraction.new(coordX, 1);
        let y = Fraction.new(coordY, 1);
        let z = Fraction.new(coordZ, 1);

        return this;
    }

    /* I wish these could be C# properties! */
    method Fraction getXcoord() { return x; }
    method Fraction getYcoord() { return y; }
    method Fraction getZcoord() { return z; }

    method Fraction getLength()
    {
        var Fraction temp1, temp2, temp3;

        let temp1 = x .mult (x);
        let temp2 = y .mult (y);
        let temp3 = temp1 .add (temp2);
        do temp1.dispose(); do temp2.dispose();
        
        let temp1 = z .mult (z);
        let temp2 = temp3 .add (temp1);
        do temp1.dispose(); do temp3.dispose();
        
        let temp1 = temp2.sqrt();
        do temp2.dispose();

        return temp1;
    }

    /** Adds this vector and the other as a new object */
    method PointVector3D vectorAdd(PointVector3D other) 
    {
        return PointVector3D.new(
            x.add(other.getXcoord()),
            y.add(other.getYcoord()),
            z.add(other.getZcoord())
        );
    }

    /** Subtracts the other vector from this as a new object */
    method PointVector3D vectorSub(PointVector3D other)
    {
        return PointVector3D.new(
            x.sub(other.getXcoord()),
            y.sub(other.getYcoord()),
            z.sub(other.getZcoord())
        );
    }

    /** */
    method PointVector3D fracMult(Fraction factor)
    {
        return PointVector3D.new(x .mult (factor), y .mult (factor), z .mult (factor));
    }

    /** Return the standart dot product for two vectors treating the basis 
        as an orthogonal and normalised one */ 
    method Fraction dotProduct(PointVector3D other)
    {
        var Fraction result, temp, temp2;

        let result = x.mult( other.getXcoord() );

        let temp = y.mult(other.getYcoord());
        let temp2 = result;
        let result = temp2 .add (temp);
        do temp.dispose(); 
        do temp2.dispose();

        let temp = z.mult(other.getZcoord());
        let temp2 = result;
        let result = temp2 .add (temp);
        do temp.dispose(); 
        do temp2.dispose();

        return result;
    }

    /** Computes the cross product of two given vectors as a new vector in standart basis */
    method PointVector3D crossProduct(PointVector3D other)
    {
        var Fraction newCoordX, newCoordY, newCoordZ;
        var Fraction temp1, temp2;

        let temp1 = y .mult (other.getZcoord());
        let temp2 = z .mult (other.getYcoord());
        let newCoordX = temp1 .sub (temp2);
        do temp1.dispose(); 
        do temp2.dispose();

        let temp1 = z .mult (other.getXcoord());
        let temp2 = x .mult (other.getZcoord());
        let newCoordY = temp1 .sub (temp2);
        do temp1.dispose(); 
        do temp2.dispose();

        let temp1 = x .mult (other.getYcoord());
        let temp2 = y .mult (other.getXcoord());
        let newCoordZ = temp1 .sub (temp2);
        do temp1.dispose(); 
        do temp2.dispose();

        return PointVector3D.new( newCoordX, newCoordY, newCoordZ );
    } 
    

    /** Return the distance between two points as a Fraction object */
    method Fraction getDistanceTo(PointVector3D other)
    {
        var Fraction result, temp;

        let temp = x.sub(other.getXcoord());
        let result = temp.mult(temp);
        do temp.dispose();

        let temp = y.sub(other.getYcoord());
        let result = result.add( temp.mult(temp) );
        do temp.dispose();

        let temp = z.sub(other.getZcoord());
        let result = result.add( temp.mult(temp) );
        do temp.dispose();

        return result.sqrt();
    }
    
    /** Adds _value_ to x coordinate of this and creates a new object */
    method PointVector3D addToX(int value) {
        var Fraction newXValue;

        let newXValue = x;
        let newXValue = newXValue.addInt(value);

        return PointVector3D.new(newXValue, y, z);
    }

    /** Adds _value_ to y coordinate of this and creates a new object */
    method PointVector3D addToY(int value) {
        var Fraction newYValue;

        let newYValue = y;
        let newYValue = newYValue.addInt(value);

        return PointVector3D.new(x, newYValue, z);
    }

    /** Adds _value_ to z coordinate of this and creates a new object */
    method PointVector3D addToZ(int value) {
        var Fraction newZValue;

        let newZValue = z;
        let newZValue = newZValue.addInt(value);

        return PointVector3D.new(x, y, newZValue);
    }
    
    /** Multiplies the x coordinate of this by value and creates a new object */
    method PointVector3D multX(int value) {
        var Fraction newXValue;
        let newXValue = x.multInt(value);
        return PointVector3D.new(newXValue, y, z);
    }

    /** Multiplies the y coordinate of this by value and creates a new object */
    method PointVector3D multY(int value) {
        var Fraction newYValue;
        let newYValue = y.multInt(value);
        return PointVector3D.new(x, newYValue, z);
    }

    /** Multiplies the z coordinate of this by value and creates a new object */
    method PointVector3D multZ(int value) {
        var Fraction newZValue;
        let newZValue = z.multInt(value);
        return PointVector3D.new(x, y, newZValue);
    }

    method void print(){
        do Output.printString("(");
        do x.print();
        do Output.printString(",");
        do Output.printString(" ");
        do y.print();
        do Output.printString(",");
        do Output.printString(" ");
        do z.print();
        do Output.printString(")");
        return;
    }


    method void dispose()
    {
        do x.dispose();
        do y.dispose();
        do z.dispose();
        do Memory.deAlloc(this);
        do x.dispose();
        do y.dispose();
        do z.dispose();
        return;
    }
}