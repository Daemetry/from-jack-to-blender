class Fraction{
    field int numerator, denominator;   

    function Fraction getDefault(){
        return Fraction.new(0, 1);
    }

    function Fraction getOne(){
        return Fraction.new(1, 1);
    }

    constructor Fraction new(int x, int y) {
        if (y = 0)
        {
            do Sys.error(0);
        }

        let numerator = x;
        let denominator = y;
        do reduce();
        return this; 
    }

    constructor Fraction newUnreduced(int x, int y) 
    {
        if (y = 0)
        {
            do Sys.error(0);
        }

        let numerator = x;
        let denominator = y;
        return this; 
    }

    /** get accessor method for fraction's denominator */
    method int getDenominator() { return denominator; }
    /** get accessor method for fraction's numerator */
    method int getNumerator() { return numerator; }

    /** Reduces the fraction, dividing the numerator and denominator by their gcd */
    method void reduce()
    {
        var int g;
        let g = Fraction.gcd(numerator, denominator);
        if (g > 1) 
        {
            let numerator = numerator / g;
            let denominator = denominator / g;
        }
        return;
    }


    method int toInt(){
        return numerator / denominator;
    }

    method void print()
    {
        do Output.printInt(numerator);
        do Output.printString("/");
        do Output.printInt(denominator);
        return;
    }

    method void dispose()
    {
        do Memory.deAlloc(this);
        return;
    }


    /** Computes the greatest common denominator of integers a and b */
    function int gcd(int a, int b)
    {
        var int r;
        while(~(b = 0))
        {
            let r = a - (b * (a / b));
            let a = b;
            let b = r;
        }
        return a;
    }
    
    /** Computes the least common multiple of integers a and b */
    function int lcm(int a, int b)
    {
        return a / Fraction.gcd(a, b) * b;
    }
    
    // Fraction to Fraction mathematics

    // Doing this using the gcd should hopefully result
    // in less overflows
    
    function boolean isNegative(Fraction x){
        var int num, denom;
        let num = x.getNumerator();
        let denom = x.getDenominator();

        return num * denom < 0;
    }

    /** Adds other fraction to this into a new object */
    method Fraction add(Fraction other)
    {
        var int sumNumerators, gcd;
        let gcd = Fraction.gcd(denominator, other.getDenominator());
        let sumNumerators = (numerator * (other.getDenominator() / gcd)) + (other.getNumerator() * (denominator / gcd));
        return Fraction.newUnreduced(sumNumerators, denominator / gcd * other.getDenominator());
    }

    /** Subtracts other fraction from this into a new object */
    method Fraction sub(Fraction other)
    {
        var int subNumerators, gcd;
        let gcd = Fraction.gcd(denominator, other.getDenominator());
        let subNumerators = (numerator * (other.getDenominator() / gcd)) - (other.getNumerator() * (denominator / gcd));
        return Fraction.newUnreduced(subNumerators, denominator / gcd * other.getDenominator());
    }
    
    /** Multiplies this fraction by other into a new object */
    method Fraction mult(Fraction other)
    {
        var int gcd1, gcd2;

        let gcd1 = Fraction.gcd(numerator, other.getDenominator());
        let gcd2 = Fraction.gcd(denominator, other.getNumerator());
        
        return Fraction.newUnreduced(
            (numerator / gcd1) * (other.getNumerator() / gcd2), 
            (denominator / gcd2) * (other.getDenominator() / gcd1));
    }

    /** Divides this fraction by other into a new object */
    method Fraction div(Fraction other)
    {
        var Fraction otherFlipped, multRes;
        
        if (other.getNumerator() = 0)
        {
            do Sys.error(0);
        }

        let otherFlipped = Fraction.newUnreduced(other.getDenominator(), other.getNumerator());
        let multRes = this;
        let multRes = multRes.mult(otherFlipped);
        do otherFlipped.dispose();
        return multRes;
    }

    /** Takes the square root of the fraction */
    method Fraction sqrt()
    {
        // The numerator and denominator are multipled defore being
        // passed down into Math.sqrt in order to somehow increase 
        // the expected precision
        var int multiplier;

        let multiplier = 1;

        if ((numerator < 8196) & (denominator < 8196))
        {
            let multiplier = 4;
        }

        if ((numerator < 2048) & (denominator < 2048))
        {
            let multiplier = 16;
        }

        if ((numerator < 512) & (denominator < 512))
        {
            let multiplier = 64;
        }

        if ((numerator < 128) & (denominator < 128))
        {
            let multiplier = 256;
        }

        if ((numerator < 32) & (denominator < 32))
        {
            let multiplier = 1024;
        }


        return Fraction.new(
            Math.sqrt(numerator * multiplier),
            Math.sqrt(denominator * multiplier));
    }

    // Fraction to Int mathematics

    /** Adds an integer to this fraction into a new object*/
    method Fraction addInt(int number)
    {
        return Fraction.new(
            numerator + (number * denominator), 
            denominator);
    }

    /** Subtracts an integer from this fraction into a new object*/
    method Fraction subInt(int number)
    {
        return Fraction.new(
            numerator - (number * denominator), 
            denominator);
    }

    /** Multiplies this fraction by a given integer into a new object */
    method Fraction multInt(int number)
    {
        return Fraction.new(
            numerator * number,
            denominator);
    }

    /** Divides this fraction by a given integer into a new object */
    method Fraction divInt(int number)
    {
        return Fraction.new(
            numerator,
            denominator * number);
    }

    /** Takes the square root of a number using fractions for better precision */
    function Fraction fracSqrt(int number)
    {
        var Fraction temp;
        let temp = Fraction.newUnreduced(number, 1);
        return temp.sqrt();
    }

    method Fraction reverse(){
        return Fraction.new(denominator, numerator);
    }
}